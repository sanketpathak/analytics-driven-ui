{"version":3,"file":"filter-fields.component.js","sourceRoot":"","sources":["../../../../build/src/app/filter/filter-fields.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  DoCheck,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { FilterConfig } from './filter-config';\nimport { FilterEvent } from './filter-event';\nimport { FilterField } from './filter-field';\nimport { FilterQuery } from './filter-query';\n\nimport { cloneDeep, defaults, find, isEqual } from 'lodash';\n\n/**\n * Component for the filter query field and filter query dropdown\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-filter-fields',\n  styles: [`.filter-pf a{cursor:pointer}.filter-pf.filter-fields .form-group{padding-left:0;width:275px}.filter-pf.filter-fields .tooltip{white-space:nowrap}.filter-pf.filter-fields .typeahead-input-container{position:relative;padding-right:0}.filter-pf.filter-fields .typeahead-input-container .caret{color:#8b8d8f;font-style:italic;position:absolute;top:10px;right:12px;z-index:2}.filter-select .btn-default{background-color:#fff;background-image:none;color:#8b8d8f;font-style:italic;font-weight:400}.filter-select .avatar{height:20px;margin-right:5px}.input-group .input-group-btn .dropdown-menu>.selected>a{background-color:#0088ce!important;border-color:#0088ce!important;color:#fff}`],\n  template: `<div class=\"filter-pf filter-fields\"><div class=\"input-group form-group\"><div class=\"input-group-btn\" dropdown><button type=\"button\" class=\"btn btn-default filter-fields dropdown-toggle\" dropdownToggle tooltip=\"Filter by\" placement=\"{{config?.tooltipPlacement}}\">{{currentField?.title}} <span class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\" *dropdownMenu><li role=\"menuitem\" *ngFor=\"let field of config?.fields\"><a class=\"filter-field dropdown-item\" role=\"menuitem\" tabindex=\"-1\" (click)=\"selectField(field)\">{{field?.title}}</a></li></ul></div><div *ngIf=\"!currentField?.type || currentField?.type === 'text' || currentField.type === 'default'\"><input class=\"form-control\" type=\"{{currentField?.type}}\" [(ngModel)]=\"currentValue\" placeholder=\"{{currentField?.placeholder}}\" (keypress)=\"fieldInputKeyPress($event)\"></div><div *ngIf=\"currentField?.type === 'select'\"><div class=\"btn-group bootstrap-select form-control filter-select\" dropdown><button type=\"button\" class=\"btn btn-default dropdown-toggle\" dropdownToggle><span class=\"filter-option pull-left\">{{currentValue || currentField?.placeholder}}</span> <span class=\"caret\"></span></button><ul class=\"dropdown-menu\" role=\"menu\" *dropdownMenu><li role=\"menuitem\" *ngIf=\"currentField?.placeholder\"><a class=\"dropdown-item\" tabindex=\"-1\" (click)=\"selectQuery()\">{{currentField?.placeholder}}</a></li><li role=\"menuitem\" *ngFor=\"let query of currentField?.queries\" [ngClass]=\"{'selected': query?.value === currentValue, 'divider dropdown-divider': query?.separator}\"><a class=\"dropdown-item\" tabindex=\"-1\" (click)=\"selectQuery(query)\" *ngIf=\"!query?.separator\"><span class=\"{{query?.iconStyleClass}}\" *ngIf=\"query?.iconStyleClass\"></span> <img class=\"avatar\" [attr.src]=\"query?.imageUrl\" *ngIf=\"query?.imageUrl\"> {{query.value}}</a></li></ul></div></div><div *ngIf=\"currentField?.type === 'typeahead'\"><div class=\"btn-group bootstrap-select form-control filter-select\" dropdown><div class=\"pull-left typeahead-input-container dropdown-toggle\" dropdownToggle><input #queryInput class=\"form-control\" type=\"text\" placeholder=\"{{currentField?.placeholder}}\" [(ngModel)]=\"currentValue\" (ngModelChange)=\"queryInputChange($event)\"> <span (click)=\"queryInput.focus()\" class=\"caret\"></span></div><ul class=\"dropdown-menu\" role=\"menu\" *dropdownMenu><li role=\"menuitem\" *ngIf=\"currentField.placeholder\"><a class=\"dropdown-item\" tabindex=\"-1\" (click)=\"selectQuery()\">{{currentField?.placeholder}}</a></li><li role=\"menuitem\" *ngFor=\"let query of currentField?.queries\" [ngClass]=\"{'selected': query.value === currentValue, 'divider dropdown-divider': query?.separator}\"><a class=\"dropdown-item\" tabindex=\"-1\" (click)=\"selectQuery(query)\" *ngIf=\"!query?.separator\"><span class=\"{{query?.iconStyleClass}}\" *ngIf=\"query?.iconStyleClass\"></span> <img class=\"avatar\" [attr.src]=\"query?.imageUrl\" *ngIf=\"query?.imageUrl\"> <span [innerHTML]=\"query.value | SearchHighlight: queryInput.value\"></span></a></li></ul></div></div></div></div>`\n})\nexport class FilterFieldsComponent implements DoCheck, OnInit {\n  /**\n   * The filter config containing component properties\n   */\n  @Input() config: FilterConfig;\n\n  /**\n   * The event emitted when a filter has been added\n   */\n  @Output('onAdd') onAdd = new EventEmitter();\n\n  /**\n   * The event emitted when a field menu option is selected\n   */\n  @Output('onFieldSelect') onFieldSelect = new EventEmitter();\n\n  /**\n   * The event emitted when the user types ahead in the query input field\n   */\n  @Output('onTypeAhead') onTypeAhead = new EventEmitter();\n\n  private _currentField: FilterField;\n  private _currentValue: string;\n  private defaultConfig = {} as FilterConfig;\n  private prevConfig: FilterConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   *  Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   *  Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n    this.prevConfig = cloneDeep(this.config);\n\n    if (this.config && this.config.fields === undefined) {\n      this.config.fields = [];\n    }\n    if (this.config && this.config.tooltipPlacement === undefined) {\n      this.config.tooltipPlacement = 'top';\n    }\n\n    let fieldFound: boolean = false;\n    if (this._currentField !== undefined) {\n      find(this.config.fields, (nextField) => {\n        if (nextField.id === this._currentField.id) {\n          fieldFound = true;\n          return;\n        }\n      });\n    }\n    if (!fieldFound) {\n      this._currentField = this.config.fields[0];\n      this._currentValue = null;\n    }\n\n    if (this._currentValue === undefined) {\n      this._currentValue = null;\n    }\n  }\n\n  // Getters & setters\n\n  /**\n   * Get the current filter field\n   *\n   * @returns {FilterField} The current filter field\n   */\n  get currentField(): FilterField {\n    return this._currentField;\n  }\n\n  /**\n   * Get the current filter field value\n   *\n   * @returns {string} The current filter field value\n   */\n  get currentValue(): string {\n    return this._currentValue;\n  }\n\n  /**\n   * Set the current filter field value\n   *\n   * @param val The current filter field value\n   */\n  set currentValue(val: string) {\n    this._currentValue = val;\n  }\n\n  // Private\n\n  private fieldInputKeyPress($event: KeyboardEvent): void {\n    if ($event.which === 13 && this._currentValue && this._currentValue.length > 0) {\n      this.onAdd.emit({\n        field: this._currentField,\n        value: this._currentValue\n      } as FilterEvent);\n      this._currentValue = undefined;\n    }\n  }\n\n  private queryInputChange(value: string) {\n    this.onTypeAhead.emit({\n      field: this._currentField,\n      value: this._currentValue\n    } as FilterEvent);\n  }\n\n  private selectField(field: FilterField): void {\n    this._currentField = field;\n    this._currentValue = null;\n    this.onFieldSelect.emit({\n      field: this._currentField,\n      value: this._currentValue\n    } as FilterEvent);\n  }\n\n  private selectQuery(filterQuery: FilterQuery): void {\n    if (filterQuery != null) {\n      this.onAdd.emit({\n        field: this._currentField,\n        query: filterQuery,\n        value: filterQuery.value\n      } as FilterEvent);\n      this._currentValue = null;\n    }\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}