{"version":3,"file":"list.component.js","sourceRoot":"","sources":["../../../../../build/src/app/list/basic-list/list.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EACL,SAAS,EAET,KAAK,EAEL,WAAW,EACX,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAW,MAAM,QAAQ,CAAC;AAE/D;;;;;;;;;;GAUG;AAOH,IAAa,aAAa;IAAS,iCAAQ;IAuBzC;;OAEG;IACH;QAAA,YACE,iBAAO,SACR;QAjBO,mBAAa,GAAG;YACtB,QAAQ,EAAE,KAAK;YACf,SAAS,EAAE,KAAK;YAChB,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,EAAE;YACjB,kBAAkB,EAAE,MAAM;YAC1B,WAAW,EAAE,KAAK;YAClB,YAAY,EAAE,KAAK;YACnB,cAAc,EAAE,KAAK;SACR,CAAC;;IAQhB,CAAC;IAED,iBAAiB;IAEjB;;OAEG;IACH,gCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,iCAAS,GAAT;QACE,8BAA8B;QAC9B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAED;;OAEG;IACO,mCAAW,GAArB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YAC9B,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,CAAC;QACD,iBAAM,WAAW,WAAE,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACO,iCAAS,GAAnB;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,SAAS;IAED,uCAAe,GAAvB,UAAwB,IAAS;QAC/B,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAEO,wCAAgB,GAAxB,UAAyB,IAAS;QAChC,qDAAqD;QACrD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;YAC1B,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACjC,CAAC;IACH,oBAAC;AAAD,CAAC,AAvFD,CAAmC,QAAQ,GAuF1C;AAnFU;IAAR,KAAK,EAAE;8BAAS,UAAU;6CAAC;AAKnB;IAAR,KAAK,EAAE;8BAAiB,WAAW;qDAAM;AAT/B,aAAa;IANzB,SAAS,CAAC;QACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,QAAQ,EAAE,WAAW;QACrB,MAAM,EAAE,CAAC,ivBAAivB,CAAC;QAC3vB,QAAQ,EAAE,q/EAA24E;KACt5E,CAAC;;GACW,aAAa,CAuFzB;SAvFY,aAAa","sourcesContent":["import {\n  Component,\n  DoCheck,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { ListBase } from '../list-base';\nimport { ListConfig } from './list-config';\n\nimport { cloneDeep, defaults, isEqual, without } from 'lodash';\n\n/**\n * List component\n *\n * For items, use a template named itemTemplate to contain content for each item. For each item in the items array, the\n * expansion can be disabled by setting disabled to true on the item. If using actions, use a template named\n * actionTemplate to contain expandable content for the actions of each item. If using expand items, use a template\n * named itemExpandedTemplate to contain expandable content for each item.\n *\n * Cannot use both multi-select and double click selection at the same time\n * Cannot use both checkbox and click selection at the same time\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-list',\n  styles: [`.pfng-list-cb-placeholder{width:12px}.pfng-list-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.pfng-list-expand-placeholder{width:8px}.pfng-list-expansion{position:relative}.pfng-list-expansion .list-pf-content{-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1}.pfng-list-heading{pointer-events:none}@media (max-width:992px){.pfng-list-heading{display:none}}.pfng-list-heading:hover{background-color:#fff}.pfng-list-heading i{pointer-events:auto}.pfng-list-heading.list-pf-item{border-top:none}.pfng-list-heading .list-pf-title{font-size:inherit;font-weight:400}.pfng-list-heading .list-pf-chevron+.list-pf-content,.pfng-list-heading .list-pf-select+.list-pf-content{border-left:none}`],\n  template: `<div class=\"list-pf\" *ngIf=\"!itemsEmpty\"><div class=\"list-pf-item {{item?.itemStyleClass}}\" *ngFor=\"let item of items; let i = index\" [ngClass]=\"{'active': item.selected || item.isItemExpanded, 'pfng-list-heading': config.useHeading && i === 0}\"><div class=\"list-pf-container\"><div *ngIf=\"config.useHeading && i === 0; then showExpandHeader else showExpand\"></div><ng-template #showExpandHeader><div class=\"list-pf-chevron\" *ngIf=\"config.useExpandItems\"><div class=\"pfng-list-expand-placeholder\"></div></div></ng-template><ng-template #showExpand><div class=\"list-pf-chevron\" *ngIf=\"config.useExpandItems\"><div class=\"pfng-list-expand-placeholder\" *ngIf=\"item.hideExpandToggle === true\"></div><span class=\"fa fa-angle-right\" *ngIf=\"item.hideExpandToggle !== true\" (click)=\"toggleExpandArea(item)\" [ngClass]=\"{'fa-angle-down': item.expanded && item.expandId === undefined}\"></span></div></ng-template><div *ngIf=\"(config.useHeading && i === 0); then showCheckboxHeader else showCheckbox\"></div><ng-template #showCheckboxHeader><div class=\"list-pf-select\" *ngIf=\"config.showCheckbox\"><div class=\"pfng-list-cb-placeholder\"></div></div></ng-template><ng-template #showCheckbox><div class=\"list-pf-select\" *ngIf=\"config.showCheckbox\"><input type=\"checkbox\" value=\"item.selected\" [(ngModel)]=\"item.selected\" (ngModelChange)=\"checkboxChange(item)\"></div></ng-template><div class=\"list-pf-content list-pf-content-flex\"><div class=\"pfng-list-content\" (click)=\"toggleSelection($event, item)\" (dblclick)=\"dblClick($event, item)\"><ng-template *ngIf=\"itemTemplate\" [ngTemplateOutlet]=\"itemTemplate\" [ngOutletContext]=\"{ item: item, index: i }\"></ng-template></div><div class=\"list-pf-actions\"><ng-template *ngIf=\"actionTemplate\" [ngTemplateOutlet]=\"actionTemplate\" [ngOutletContext]=\"{ item: item, index: i }\"></ng-template></div></div></div><div class=\"pfng-list-expansion list-pf-expansion collapse in\" *ngIf=\"!(config.useHeading && i === 0) && expandTemplate && item.expanded\"><div class=\"list-pf-container\" tabindex=\"0\"><div class=\"list-pf-content\"><div class=\"close\" *ngIf=\"config.hideClose !== true\"><span class=\"pficon pficon-close\" (click)=\"closeExpandArea(item)\"></span></div><ng-template [ngTemplateOutlet]=\"expandTemplate\" [ngOutletContext]=\"{ item: item, index: i }\"></ng-template></div></div></div></div></div><pfng-empty-state *ngIf=\"itemsEmpty\" [config]=\"config.emptyStateConfig\" (onActionSelect)=\"handleAction($event)\"></pfng-empty-state>`\n})\nexport class ListComponent extends ListBase implements DoCheck, OnInit {\n  /**\n   * The list config containing component properties\n   */\n  @Input() config: ListConfig;\n\n  /**\n   * The name of the template used to contain expandable content for each item\n   */\n  @Input() expandTemplate: TemplateRef<any>;\n\n  private defaultConfig = {\n    dblClick: false,\n    hideClose: false,\n    multiSelect: false,\n    selectedItems: [],\n    selectionMatchProp: 'uuid',\n    selectItems: false,\n    showCheckbox: false,\n    useExpandItems: false\n  } as ListConfig;\n  private prevConfig: ListConfig;\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n    super();\n  }\n\n  // Initialization\n\n  /**\n   *  Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n    this.setupConfig();\n  }\n\n  /**\n   *  Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n    }\n  }\n\n  /**\n   * Set up default config\n   */\n  protected setupConfig(): void {\n    if (this.config !== undefined) {\n      defaults(this.config, this.defaultConfig);\n    } else {\n      this.config = cloneDeep(this.defaultConfig);\n    }\n    super.setupConfig();\n    this.prevConfig = cloneDeep(this.config);\n  }\n\n  /**\n   * Return component config\n   *\n   * @returns {} ListConfig The component config\n   */\n  protected getConfig(): ListConfig {\n    return this.config;\n  }\n\n  // Toggle\n\n  private closeExpandArea(item: any): void {\n    item.expandId = undefined;\n    item.expanded = false;\n  }\n\n  private toggleExpandArea(item: any): void {\n    // Item may already be open due to compound expansion\n    if (item.expanded && item.expandId !== undefined) {\n      item.expandId = undefined;\n      return;\n    }\n    item.expandId = undefined;\n    item.expanded = !item.expanded;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}