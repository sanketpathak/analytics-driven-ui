{"version":3,"file":"search-highlight.pipe.js","sourceRoot":"","sources":["../../../../build/src/app/search-highlight/search-highlight.pipe.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AAEpD;;;;GAIG;AAEH,IAAa,mBAAmB;IAAhC;IA+BA,CAAC;IA9BC,uCAAS,GAAT,UAAU,GAAW,EAAE,MAAc;QACnC,EAAE,CAAC,CAAC,MAAM,KAAK,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACnC,IAAI,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;YACjC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAC;YACzB,IAAI;gBAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;QAChG,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,GAAG,CAAC;QACb,CAAC;IACH,CAAC;IAED,+CAAiB,GAAjB,UAAkB,GAAW,EAAE,QAAgB;QAC7C,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBACnB,KAAK,GAAG,IAAI,CAAC;gBACb,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC1B,KAAK,GAAG,KAAK,CAAC;gBACd,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBAClB,MAAM,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;YAC1B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC;QACH,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IACH,0BAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,mBAAmB;IAD/B,IAAI,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAC,CAAC;GACpB,mBAAmB,CA+B/B;SA/BY,mBAAmB","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Search highlight pipe\n *\n * This is currently used with the type ahead feature of the filter fields component\n */\n@Pipe({ name: 'SearchHighlight'})\nexport class SearchHighlightPipe implements PipeTransform {\n  transform(val: string, search: string): any {\n    if (search !== '' && search.length) {\n      let lowerVal = val.toLowerCase();\n      search = search.toLowerCase();\n      if (!lowerVal) return '';\n      else return this.convertToOriginal(lowerVal.split(search).join('<b>' + search + '</b>'), val);\n    } else {\n      return val;\n    }\n  }\n\n  convertToOriginal(str: string, original: string): string {\n    let output = '';\n    let inTag = false;\n    let j = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '<') {\n        inTag = true;\n        output += str[i];\n      } else if (str[i] === '>') {\n        inTag = false;\n        output += str[i];\n      } else if (!inTag) {\n        output += original[j++];\n      } else {\n        output += str[i];\n      }\n    }\n    return output;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}