{"version":3,"file":"sparkline.component.js","sourceRoot":"","sources":["../../../../../build/src/app/chart/sparkline/sparkline.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, DoCheck, Input, OnInit } from '@angular/core';\n\nimport { cloneDeep, defaults, isEqual, merge } from 'lodash';\nimport { ChartDefaults } from '../chart.defaults';\nimport { ChartBase } from '../chart.base';\nimport { SparklineConfig } from './sparkline-config';\n\n/**\n * Sparkline chart component based on C3\n */\n@Component({\n  selector: 'pfng-chart-sparkline',\n  template: `<div #chartElement id=\"{{sparklineChartId}}\"></div>`\n})\nexport class SparklineComponent extends ChartBase implements DoCheck, OnInit {\n  /**\n   * Chart data for the chart\n   */\n  @Input() chartData: any;\n\n  /**\n   * Configuration object containing details about how to render the chart\n   */\n  @Input() config: SparklineConfig;\n\n  /**\n   * The chart id created during initialization\n   */\n  public sparklineChartId: any;\n\n\n  private prevChartData: any;\n  private defaultConfig: SparklineConfig;\n\n  /**\n   * Default constructor\n   * @param chartDefaults\n   */\n  constructor(private chartDefaults: ChartDefaults) {\n    super();\n  }\n\n  /**\n   * NgOnInit implementation\n   */\n  ngOnInit(): void {\n    // Create an ID for the chart based on the chartId in the config if given\n    if (this.sparklineChartId === undefined) {\n      this.sparklineChartId = 'sparklineChart';\n      if (this.config.chartId) {\n        this.sparklineChartId = this.config.chartId + this.sparklineChartId;\n      }\n    }\n\n    this.setupConfig();\n    this.updateAll();\n    super.generateChart(this.sparklineChartId);\n  }\n\n  /**\n   *  Check if the component config has changed\n   */\n  ngDoCheck(): void {\n    // Do a deep compare on config\n    if (!isEqual(this.chartData, this.prevChartData)) {\n      this.updateAll();\n    }\n\n    if (!isEqual(this.config, this.prevConfig)) {\n      this.setupConfig();\n      this.generateChart(this.sparklineChartId, true);\n    }\n  }\n\n  /**\n   * Tooltip function for sparklines\n   * @returns {{contents: ((d:any)=>string), position: ((data:any, width:number, height:number, element:any)=>{top: number, left: number})}}\n   */\n  public sparklineTooltip() {\n    return {\n      contents: (d: any) => {\n        let tipRows;\n        let percentUsed = 0;\n\n        if (this.config.tooltipFn) {\n          tipRows = this.config.tooltipFn(d);\n        } else {\n          switch (this.config.tooltipType) {\n            case 'usagePerDay':\n              if (this.chartData.dataAvailable !== false && this.chartData.total > 0) {\n                percentUsed = Math.round(d[0].value / this.chartData.total * 100.0);\n              }\n              tipRows =\n                '<tr>' +\n                '  <th colspan=\"2\">' + d[0].x.toLocaleDateString() + '</th>' +\n                '</tr>' +\n                '<tr>' +\n                '  <td class=\"name\">' + percentUsed + '%:' + '</td>' +\n                '  <td class=\"value text-nowrap\">' + d[0].value + ' ' +  (this.config.units ? this.config.units + ' ' : '') + d[0].name + '</td>' +\n                '</tr>';\n              break;\n            case 'valuePerDay':\n              tipRows =\n                '<tr>' +\n                '  <td class=\"value\">' +  d[0].x.toLocaleDateString() + '</td>' +\n                '  <td class=\"value text-nowrap\">' +  d[0].value + ' ' + d[0].name + '</td>' +\n                '</tr>';\n              break;\n            case 'percentage':\n              percentUsed = Math.round(d[0].value / this.chartData.total * 100.0);\n              tipRows =\n                '<tr>' +\n                '  <td class=\"name\">' + percentUsed + '%' + '</td>' +\n                '</tr>';\n              break;\n            default:\n              tipRows = this.chartDefaults.getDefaultSparklineTooltip().contents(d);\n          }\n        }\n        return this.getTooltipTableHTML(tipRows);\n      },\n      position: (data: any, width: number, height: number, element: any) => {\n        let center;\n        let top;\n        let chartBox;\n        let graphOffsetX;\n        let x;\n\n        try {\n          center = parseInt(element.getAttribute('x'));\n          top = parseInt(element.getAttribute('y'));\n          chartBox = document.querySelector('#' + this.sparklineChartId).getBoundingClientRect();\n          graphOffsetX = document.querySelector('#' + this.sparklineChartId + ' g.c3-axis-y').getBoundingClientRect().right;\n          x = Math.max(0, center + graphOffsetX - chartBox.left - Math.floor(width / 2));\n\n          return {\n            top: top - height,\n            left: Math.min(x, chartBox.width - width)\n          };\n        } catch (e) {\n        }\n      }\n    };\n  }\n\n\n  /*\n   * Convert the config data to C3 Data\n   */\n  protected getSparklineData(chartData: any): any {\n    let sparklineData: any  = {\n      type: 'area'\n    };\n\n    if (chartData && chartData.dataAvailable !== false && chartData.xData && chartData.yData) {\n      sparklineData.x = chartData.xData[0];\n      sparklineData.columns = [\n        chartData.xData,\n        chartData.yData\n      ];\n    }\n\n    return sparklineData;\n  };\n\n  private setupConfig(): void {\n    this.defaultConfig = this.chartDefaults.getDefaultSparklineConfig();\n    this.defaultConfig.axis = {\n      x: {\n        show: this.config.showXAxis === true,\n        type: 'timeseries',\n        tick: {\n          format: () => {\n            return ''; //change to lambda ?\n          }\n        }\n      },\n      y: {\n        show: this.config.showYAxis === true,\n        tick: {\n          format: () => {\n            return ''; //change to lambda ?\n          }\n        }\n      }\n    };\n\n    // Setup the default configuration\n    this.defaultConfig.tooltip = this.sparklineTooltip();\n    this.defaultConfig.units = '';\n\n    // Override defaults with callers specifications\n    defaults(this.config, this.defaultConfig);\n\n    if (this.config.chartHeight) {\n      this.defaultConfig.size.height = this.config.chartHeight;\n      this.config.size.height = this.config.chartHeight;\n    }\n\n    /*\n     * Setup Axis options. Default is to not show either axis. This can be overridden in two ways:\n     *   1) in the config, setting showAxis to true will show both axes\n     *   2) in the attributes showXAxis and showYAxis will override the config if set\n     *\n     * By default only line and the tick marks are shown, no labels. This is a sparkline and should be used\n     * only to show a brief idea of trending. This can be overridden by setting the config.axis options per C3\n     */\n    if (this.config.axis) {\n      this.config.axis.x.show = this.config.showXAxis === true;\n      this.config.axis.y.show = this.config.showYAxis === true;\n    }\n  }\n\n  private updateAll(): void {\n    // Need to deep watch changes in chart data\n    this.prevChartData = cloneDeep(this.chartData);\n    // Convert the given data to C3 chart format\n    this.config.data = merge(this.config.data, this.getSparklineData(this.chartData));\n  }\n\n  private getTooltipTableHTML(tipRows: any): string {\n    return '<div class=\"module-triangle-bottom\">' +\n      '  <table class=\"c3-tooltip\">' +\n      '    <tbody>' +\n      tipRows +\n      '    </tbody>' +\n      '  </table>' +\n      '</div>';\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}