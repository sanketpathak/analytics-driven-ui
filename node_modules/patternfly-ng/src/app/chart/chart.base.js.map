{"version":3,"file":"chart.base.js","sourceRoot":"","sources":["../../../../build/src/app/chart/chart.base.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC5D,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C;IAqBE;QAdA;;;WAGG;QACO,gBAAW,GAAsB,IAAI,YAAY,EAAE,CAAC;IAW9D,CAAC;IAED;;;;OAIG;IACO,iCAAa,GAAvB,UAAyB,OAAe,EAAE,MAAgB;QAA1D,iBAkBC;QAjBC,UAAU,CAAC;YACT,IAAI,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC;YAC3B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,QAAQ,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC;gBAChC,yDAAyD;gBACzD,sCAAsC;gBACtC,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,KAAK,IAAI,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnE,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACrC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,gEAAgE;oBAChE,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACpC,CAAC;gBAED,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;gBAClC,KAAI,CAAC,UAAU,GAAG,SAAS,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,gBAAC;AAAD,CAAC,AAhDD,IAgDC;;AA3CU;IAAR,KAAK,EAAE;8BAAgB,WAAW;yCAAC;AAM1B;IAAT,MAAM,EAAE;8BAAc,YAAY;8CAA2B","sourcesContent":["import { Input, Output, EventEmitter } from '@angular/core';\nimport * as c3 from 'c3';\nimport { cloneDeep } from 'lodash';\nimport { ChartConfig } from './chart-config';\n\nexport abstract class ChartBase {\n\n  /**\n   * Chart configuration object with data\n   */\n  @Input() public config: ChartConfig;\n\n  /**\n   * Event emitted with the chart reference after load is complete\n   * @type {EventEmitter}\n   */\n  @Output() chartLoaded: EventEmitter<any> = new EventEmitter();\n\n\n  /**\n   * Stored previous config to check for any changes\n   */\n  protected prevConfig: ChartConfig;\n  // store the chart object\n  private chart: any;\n\n  constructor() {\n  }\n\n  /**\n   * Protected method called when configuration or data changes by any class that inherits from this\n   * @param chartId\n   * @param reload\n   */\n  protected generateChart (chartId: string, reload?: boolean): void {\n    setTimeout(() => {\n      let c3Config = this.config;\n      if (c3Config) {\n        c3Config.bindto = '#' + chartId;\n        // always re-generate donut pct chart because it's colors\n        // change based on data and thresholds\n        if (!this.chart || reload || chartId.indexOf('donutPctChart') > -1) {\n          this.chart = c3.generate(c3Config);\n        } else {\n          //if chart is already created, then we only need to re-load data\n          this.chart.load(this.config.data);\n        }\n\n        this.chartLoaded.emit(this.chart);\n        this.prevConfig = cloneDeep(this.config);\n      }\n    });\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}