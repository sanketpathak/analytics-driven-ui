{"version":3,"file":"toast-notification-list.component.js","sourceRoot":"","sources":["../../../../build/src/app/notification/toast-notification-list.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,EAEL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAKvB;;GAEG;AAOH,IAAa,8BAA8B;IA0BzC;;OAEG;IACH;QAlBA;;WAEG;QACuB,mBAAc,GAAG,IAAI,YAAY,EAAE,CAAC;QAE9D;;WAEG;QACsB,kBAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QAE5D;;WAEG;QACwB,oBAAe,GAAG,IAAI,YAAY,EAAE,CAAC;IAMhE,CAAC;IAED,iBAAiB;IAEjB;;OAEG;IACH,iDAAQ,GAAR;IACA,CAAC;IAED,UAAU;IAEV;;OAEG;IACK,qDAAY,GAApB,UAAqB,MAAyB;QAC5C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEO,oDAAW,GAAnB,UAAoB,MAAyB;QAC3C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEO,4DAAmB,GAA3B,UAA4B,MAAyB;QACnD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACH,qCAAC;AAAD,CAAC,AAxDD,IAwDC;AApDU;IAAR,KAAK,EAAE;;qEAA+B;AAK9B;IAAR,KAAK,EAAE;;iEAAoB;AAKF;IAAzB,MAAM,CAAC,gBAAgB,CAAC;;sEAAqC;AAKrC;IAAxB,MAAM,CAAC,eAAe,CAAC;;qEAAoC;AAKjC;IAA1B,MAAM,CAAC,iBAAiB,CAAC;;uEAAsC;AAxBrD,8BAA8B;IAN1C,SAAS,CAAC;QACT,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,QAAQ,EAAE,8BAA8B;QACxC,MAAM,EAAE,CAAC,EAAE,CAAC;QACZ,QAAQ,EAAE,0mBAAglB;KAC3lB,CAAC;;GACW,8BAA8B,CAwD1C;SAxDY,8BAA8B","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { Notification } from './notification';\nimport { NotificationEvent } from './notification-event';\n\n/**\n * Component to display a list of toast notifications\n */\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'pfng-toast-notification-list',\n  styles: [``],\n  template: `<div class=\"toast-notifications-list-pf\" *ngIf=\"notifications?.length > 0\"><div *ngFor=\"let notification of notifications\"><pfng-toast-notification [header]=\"notification.header\" [message]=\"notification.message\" [notification]=\"notification\" [moreActions]=\"notification.moreActions\" [primaryAction]=\"notification.primaryAction\" [showClose]=\"showClose === true || notification.isPersistent === true\" [type]=\"notification.type\" (onActionSelect)=\"handleAction($event)\" (onCloseSelect)=\"handleClose($event)\" (onViewingChange)=\"handleViewingChange($event)\"></pfng-toast-notification></div></div>`\n})\nexport class ToastNotificationListComponent implements OnInit {\n  /**\n   * A list of notifiactions to display\n   */\n  @Input() notifications: Notification[];\n\n  /**\n   * Set to true to show close button\n   */\n  @Input() showClose: boolean;\n\n  /**\n   * The event emitted when an action has been selected\n   */\n  @Output('onActionSelect') onActionSelect = new EventEmitter();\n\n  /**\n   * The event emitted when the close button has been selected\n   */\n  @Output('onCloseSelect') onCloseSelect = new EventEmitter();\n\n  /**\n   * The event emitted when the mouse hovers over and leaves a notification\n   */\n  @Output('onViewingChange') onViewingChange = new EventEmitter();\n\n  /**\n   * The default constructor\n   */\n  constructor() {\n  }\n\n  // Initialization\n\n  /**\n   *  Setup component configuration upon initialization\n   */\n  ngOnInit(): void {\n  }\n\n  // Actions\n\n  /**\n   *  Check if the component config has changed\n   */\n  private handleAction($event: NotificationEvent): void {\n    this.onActionSelect.emit($event);\n  }\n\n  private handleClose($event: NotificationEvent): void {\n    this.onCloseSelect.emit($event);\n  }\n\n  private handleViewingChange($event: NotificationEvent) {\n    this.onViewingChange.emit($event);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}